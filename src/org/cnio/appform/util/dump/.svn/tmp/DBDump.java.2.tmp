package org.cnio.appform.util.dump;


import java.util.Hashtable;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.FileNotFoundException;

public class DBDump {
<<<<<<< .working
	
// Query types:
// * normal is the typicals dump of values for a interview, section and all subjects
// * totals are the totals for interview and hospitals
// * questotals, are the totals for an interview, hostpital regarding to one question
	public static final String QRY_NORMAL = "normal";
	public static final String QRY_TOTALS ="totals";
	public static final String QRY_ALL_TOTALS	= "alltotals";
	public static final String QRY_QUES_TOTALS =	"questotals";
	
	private String prjName = ""; 
	private String intrvName = "";
	private String grpName = ""; 
	private Integer orderSec = -1;
	private String codQues[] = new String [MainDump.MAX_QUESTIONS];
	private String qryType = QRY_NORMAL;
	private String fileName = "";
	private int sortOrd = 0;
	
	private int fileErr = 0;
	
	public DBDump (String prj, String intrv, String grp, Integer orderSec,
								 Integer sortOrder, String file) {
		prjName = prj;
		intrvName = intrv;
		grpName = grp;
		this.orderSec = orderSec;
		sortOrd = sortOrder;
		fileName = file;
		qryType = qrytype;
		codQues = qCodes.split(",");
		
		varsmap = buildMap (fileVars);
	}
	
=======
	
	
	private String prjName = ""; 
	private String intrvName = "";
	private String grpName = ""; 
	private Integer orderSec = 0;
	private String fileName = "";
	private int sortOrd = 0;
	
	
	public DBDump (String prj, String intrv, String grp, Integer orderSec,
								 Integer sortOrder, String file) {
		prjName = prj;
		intrvName = intrv;
		grpName = grp;
		this.orderSec = orderSec;
		sortOrd = sortOrder;
		fileName = file;
	}
	
>>>>>>> .merge-right.r132

	public DBDump (String fileVars) {
		if (fileVars != null && fileVars.length() > 0)
			varsmap = buildMap (fileVars);
	}
	
	
	public DBDump () {
		
	}
	
	

<<<<<<< .working
//		DynamicRetriever dumper = new DynamicRetriever (PATH_2_DUMP);
		NewRetriever dumper = new NewRetriever (PATH_2_DUMP);
		try {
			reader = new BufferedReader (new FileReader (filename));
			String line = reader.readLine(), oldQCode = "";
			String pair[], pairKey, pairVal;
			
			dumper.getDump(prjName, intrvName, grpName, orderSec, sortOrd, fileName);
		}
		catch (FileNotFoundException fnfEx) {
			fileErr = ERR_FNF;
			return null;
			
		}
		catch (IOException ioEx) {
			return null;
		}
		
		return map;
	}
	
	
	
	
	
	public Hashtable<String, String> getVarsmap() {
		return varsmap;
	}
	
	public void setVarsMap (String fileVars) {
		if (fileVars != null && fileVars.length() > 0) {
			varsmap.clear();
			varsmap = buildMap (fileVars);
		}
	}
=======
	
	
	public DBDump () {
		
	}
	
	
	public void dump () {
>>>>>>> .merge-right.r132

<<<<<<< .working

	public void setPrjName(String prjName) {
		this.prjName = prjName;
	}


	public void setIntrvName(String intrvName) {
		this.intrvName = intrvName;
	}


	public void setGrpName(String grpName) {
		this.grpName = grpName;
	}


	public String[] getCodQues() {
		return codQues;
	}


	public void setCodQues(String codQues) {
		this.codQues = codQues.split(",");
	}


	public String getQryType() {
		return qryType;
	}


	public void setQryType(String qryType) {
		this.qryType = qryType;
	}


	public void setOrderSec(Integer orderSec) {
		this.orderSec = orderSec;
	}


	public void setFileName(String fileName) {
		this.fileName = fileName;
	}
	
	
	
	public void spitInfo () {
		String questions = "";
		System.out.println ("Getting data with parameters:");
		System.out.println ("\tProject: "+prjName);
		System.out.println ("\tQuestionnaire: "+intrvName);
		System.out.println ("\tGroup: "+grpName);
		System.out.println ("\tSection: "+orderSec);
		System.out.println ("\tQuery type: "+qryType);
		if (codQues.length > 0) {
			for (int i=0; i<codQues.length; i++)
				questions += codQues[i]+",";
			
			questions = questions.substring(0, questions.length()-1);
			System.out.println ("\tQuestions: "+questions);
		}
		
		System.out.println ("\tOutput file: "+fileName);
		if (varsmap == null || varsmap.size() == 0)
			System.out.println ("No Variable Names file provide");
	}
	
	
	
	
	
/**
 * Interface method to the core dump logic. It set the retriever up, which is
 * going to do all processing
 * @return -1 in the case of a FileNotFountException is raised; -2 if any
 * read/write error occurs; 0 if everything is ok
 */
	public int dump () {

//		NewRetriever dumper = new NewRetriever (PATH_2_DUMP, varsmap);
		DataRetriever retriever = new DataRetriever (PATH_2_DUMP, varsmap);
=======
//		DynamicRetriever dumper = new DynamicRetriever (PATH_2_DUMP);
		NewRetriever dumper = new NewRetriever (PATH_2_DUMP);
>>>>>>> .merge-right.r132
		try {
<<<<<<< .working
			spitInfo ();
			
			if (qryType.equalsIgnoreCase(DBDump.QRY_TOTALS))
				retriever.getTotals(fileName);
			
			if (qryType.equalsIgnoreCase(DBDump.QRY_ALL_TOTALS))
				retriever.getAllTotals(fileName);
			
			if (qryType.equalsIgnoreCase(DBDump.QRY_NORMAL))
				retriever.getDump(prjName, intrvName, grpName, orderSec, sortOrd, fileName);
							
			if (qryType.equalsIgnoreCase(DBDump.QRY_QUES_TOTALS))
				retriever.getQuestionTotals(fileName, prjName, intrvName, codQues);
			
=======
//			dumper.getDump ("157", 50, 1, 12, PATH_2_DUMP+"/qes12stpaubis.csv");
//			dumper.getDump ("157", 50, 304,1, PATH_2_DUMP+"/qes1marbis.csv");
			
			dumper.getDump(prjName, intrvName, grpName, orderSec, sortOrd, fileName);
>>>>>>> .merge-right.r132
		}
		catch (java.io.FileNotFoundException ex) {
<<<<<<< .working
			System.err.println("The directory to store the dump file does not exists");
			return -1;
=======
			System.err.println("The directory to store the dump file does not exists");
>>>>>>> .merge-right.r132
		}
		catch (java.io.IOException ioEx) {
<<<<<<< .working
			System.err.println(ioEx.getMessage());
			return -2;
//			ioEx.printStackTrace();
=======
			System.err.println(ioEx.getMessage());
//			ioEx.printStackTrace();
>>>>>>> .merge-right.r132
		}
<<<<<<< .working
		return 0;
=======
    
>>>>>>> .merge-right.r132
	}


	
}
