
var FormManager = function () {
		
		var numGrp, numItemsGrp;
		var isPreview;
		
		function init (preview) {
      numGrp = 1;
			numItemsGrp = 1;
			isPreview = preview == undefined? 0: preview;
    }
    
		
		
		function rmvAnswers (id) {
			
			var xReq = new AjaxReq ();
			xReq.setMethod ("POST");
			xReq.setUrl ("/appform/servlet/IntrvServlet");
			
			postdata = "what=save_just&txt=";
			postdata += encodeURIComponent(txtarea.value);
			postdata += "&patid="+patid+"&intrvid="+intrvid;
			xReq.setPostdata (postdata);
			xReq.setCallback(this.ajaxResp.onSaveItem, this.ajaxResp.onFail, this.ajaxResp, null);
			
			xReq.startReq (0);
		}
    
		
		
		
		
/**
 * This method removes the groups where the button is. This one have various 
 * implications:
 * i- the group itself have to be removed
 * ii- the buttons have to be added to the previous group again
 * iii- the questions for this group which have been answered have to be removed
 * from database
 * 
 * i- this is the table parent for these buttons. actually this is the table parent
 * with is id-children
 * 
 * ii- the buttons have to be cloned and, then, added to the previous table, which
 * the "older" sibling of the removed
 * 
 * iii- this one has to be done previous to remove the group. All input items
 * inside id-children have to be accessed in the database to be removed.
 * @param {Object} id the id of the table grouping everything
 * NOTE: this is done using jquery1.3.
 */		
		function rmvElem (id) {
			var boxes = $("table[name='"+id+"-children']");
			if (boxes.length == 1)
				return;
				
			var myBoxSel = "table[name='"+id+"-children']:last";
			var mybox = $(myBoxSel); // the table which is required to be removed
			
			var btns = $(myBoxSel+" input[type='button']"); // the bottom buttons
			var btnClones = $(btns).clone (); // clon the buttons to add to the previous table
			
			
// Loop over input items on box to build up the postdata for an ajax call
// in order to remove those answers from database
			var text = " input[type='text']";
			var select = " select";
			var qIds = new Array (); // array of ids: qQQQQ-N-O
			$(myBoxSel+text+", "+myBoxSel+select).each (function (i) {
				var myElem = $(this);
				var myId = $(myElem).attr('id'); // get the id of 'this' jquery object
				qIds.push(myId.slice (1)); // remove the 'q' from id and inser into array
			})
						
			
			var postData = "what=rmvAns&ids="+qIds.join(",");
			
			if (isPreview == 0) { // real performance...
				$.ajax ({
					url: '/appform/servlet/AjaxUtilServlet',
					type: 'POST',
					dataType: 'json',
					data: postData,
					
	// callbacks
					error: function (req, errMsg, exc) {
						alert ("There was an error while server connection. Fail to remove group of questions");
						return;
					},
					
					success: function (data, status) {
						if (data.res == 0) {
							alert (data.msg);
							return false;
						}
						return true;	
					}
				}); // EO ajax call
			}
			
			
			$(mybox).remove();
			var newBox = $(myBoxSel);
			$(newBox).next().remove();
			var btnPlace = $(myBoxSel+" td[align='right']");
//			$(btns).appendTo($(btnPlace));
			
			$(btnPlace).append($(btns[0]));
			$(btnPlace).append("&nbsp;");
			$(btnPlace).append($(btns[1]));
			return;
		}
		
		
		
		

/**
	Llega como id algo de la forma qXXX-N-O, qXXX-N-O-gG o tXXX.
	Lo que hay que hacer es:
	* si llega qXXX-N-O, crear un elemento debajo
	de éste, incrementando N
	* si llega qXXX-N-O-gG, se crea un elemento debajo de este incrementando N
	* si llega tXXX, hay que crear un elemento del grupo (que será la tabla entera)
	incrementando el N de todos los elementos y, si hay alguno con gG, cambiar
	la G, incrementándola or generando un número con Math.random.
	
	This 'method' replicates some form elems, represented for the id, which can 
	be:
	- qXXXX-N-O, which is a single element represented by a "normal" id. The N
	has to be increased every time the button is pushed
	- qXXXX-N-O-gG, which is a element inside a repeteable container. The G has to
	be increased every time the container is cloned, the N has to be increased
	every time the single component is cloned and when the container is cloned
	- tXXX is the span id previous to a container and, indicates than a container
	has to be increased. The container has to be a table just next to this mark
*/
		function addElem (id) {
    	var br=document.createElement('br');
			var nbsp = document.createTextNode('  ');
    	var input, clon;
			var newbtn, newName;
      
    	var identify=id.split("-");
    	var first=document.getElementById(id);
      var oldBtn = document.getElementById('btn-'+id);
      var elemId = identify[0];
			
			var lastGroupName;
      
      
// first, the container: a group of questions has to be duplicated			
    	if (elemId.indexOf('t') != -1) {
// this is to get the last table with this name, because several times the
// button '+' could be clicked and then disappears from the form        
//        var aux = document.getElementById (elemId+'-children');
        var aux = document.getElementsByName(elemId+'-children');
        first = aux[aux.length-1];        

				lastGroupName = first.getAttribute ("id");
				clon = first.cloneNode (true);
				numGrp++;
				
				children = clon.getElementsByTagName('*');
				var lastBtns = new Array();
				var contBtns = 0;
   			for (var i=0; i<children.length; i++)	{

          if (children[i].getAttribute('type') == 'button') { 
          /*  children[i].setAttribute('onclick', 
													"ctrl.addElem('" + children[i].getAttribute('id') + "');");
					*/	
            children[i].setAttribute('onclick', 
													"ctrl.addElem('" + newName + "');");
						lastBtns[contBtns] = children[i];
						contBtns++;
          }
          
          if (children[i].tagName == 'INPUT' || children[i].tagName == 'SELECT') {
            var selId = children[i].getAttribute('name').split("-");
            var theId = selId[0];
            var ansNum = selId[1];
            var ansOrd = selId[2];
            var ansGrp = selId[3];
            
            ansNum++;
            newName = theId + '-' + ansNum + '-' + ansOrd;
            
            if (ansGrp != undefined && 
                children[i].getAttribute('type') != 'button') {
    		  		var grpNum = ansGrp.substring(1);
              grpNum++;
    		  		numItemsGrp++;
    					newName = theId + '-' + numItemsGrp + '-' + ansOrd;
              newName += '-g' + grpNum;
    		  	}
            
            children[i].setAttribute('name', newName);
            children[i].setAttribute('id', newName);
            if (children[i].tagName == 'INPUT' &&
                children[i].getAttribute('type') != 'button') {
              children[i].value="";
            }
          }
					
  			}
        
// remove the last button of the previous pack    
        var inputElems = first.getElementsByTagName('input');
        var buttons = new Array();
				var countBtns = 0;
        for (var i = 0; i < inputElems.length; i++) {
          if (inputElems[i].getAttribute('type') == 'button') {
            buttons[countBtns] = inputElems[i];
						countBtns++;
          }
        }
				
				for (var j=0; j<buttons.length; j++)
					buttons[j].parentNode.removeChild(buttons[j]);
//        	button.parentNode.removeChild(button);
        
// supossing only two buttons per group (+ and -)
				lastBtns[0].setAttribute ('onclick', "ctrl.addElem('"+id+"');");
				lastBtns[1].setAttribute ('onclick', "ctrl.rmvElem('"+id+"');");

//				lastBtn.setAttribute('onclick', "ctrl.addElem('" + id + "');");
				input = clon;
  	  } // if element is a container
/////////////////////////////////////////////////////////////////////////
			
// a normal element			
			if (elemId.indexOf ('q') != -1) {
// defined in the top of the function				
				var elemId = identify[0];
	    	var ansNum = identify[1];
	    	var ansOrd = identify[2];
	    	var ansGrp = identify[3];
				
		    ansNum++;
        var newName;
        
// disable the old button to avoid creating new elements with it: its id will
// be wrong so
        if (oldBtn != null)
          oldBtn.setAttribute('disabled', 'disabled');
        
		  	if (ansGrp != undefined) {
		  		var grpNum = ansGrp.substring(1);
		  		numItemsGrp++;
					newName = elemId + '-' + numItemsGrp + '-' + ansOrd;
          newName += '-g' + grpNum;
		  	}
				else
					newName = elemId + '-' + ansNum + '-' + ansOrd;
		  	
        var theStyle = 'margin-left: 3px;margin-top: 3px;';
		  	input = first.cloneNode(true);
				input.setAttribute('name', newName);
				input.setAttribute('id', newName);
//        input.setAttribute('style', 'margin-left: 3px;margin-top: 3px');
        
//				input.setAttribute('size', first.getAttribute('size'));
//				input.setAttribute('maxlength', first.getAttribute('maxlength'));
        if (input.getAttribute('type') != undefined)
          input.value = "";
          
        else 
          theStyle += 'width: 200px;';
          
        input.setAttribute('style', theStyle);
				
//				var btn = document.getElementById ('btn-'+id);
				newbtn = document.createElement('input');
				newbtn.setAttribute('type', 'button');
				newbtn.setAttribute('name', 'btn-'+newName);
				newbtn.setAttribute('id', 'btn-'+newName);
        newbtn.setAttribute('value', ' + ');
        newbtn.setAttribute('style', 'width:31px');
				newbtn.setAttribute('onclick', 'ctrl.addElem("'+newName+'")');
			}
			
			first.parentNode.appendChild(br);
      first.parentNode.appendChild(br);
      first.parentNode.appendChild(br);
			first.parentNode.appendChild(input);
        

			if (newbtn != undefined) {
		  	first.parentNode.appendChild(nbsp);
        first.parentNode.appendChild(nbsp);
		  	first.parentNode.appendChild(newbtn);
		  }
    	return;
		}
		
    
		var test = function () {
			alert ("(repelems.js) FormManager")
		}
    
    return {
      addElem:addElem,
			rmvElem: rmvElem,
      init: init,
//       fail: onFail
    }
  }
 
 var ctrl;
 
 function onReady() {
// 	ctrl = new FormManager ();
//  ctrl.init();
 }